generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextIndex", "fullTextSearch", "prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model back3nd_user {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String
  email                  String                   @unique
  password               String
  reset_token            String?
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  back3nd_password_reset back3nd_password_reset[]
  roles                  back3nd_user_role[]
}

model back3nd_role {
  id          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String               @unique
  description String?
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt
  permissions back3nd_permission[]
  users       back3nd_user_role[]
}

model back3nd_user_role {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String       @db.Uuid
  role_id    String       @db.Uuid
  created_at DateTime     @default(now())
  role       back3nd_role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user       back3nd_user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
}

model back3nd_permission {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id    String         @db.Uuid
  table_id   String         @db.Uuid
  can_create Boolean        @default(false)
  can_read   Boolean        @default(false)
  can_update Boolean        @default(false)
  can_delete Boolean        @default(false)
  created_at DateTime       @default(now())
  role       back3nd_role   @relation(fields: [role_id], references: [id], onDelete: Cascade)
  table      back3nd_entity @relation(fields: [table_id], references: [id], onDelete: Cascade)

  @@unique([role_id, table_id])
}

model back3nd_entity {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String               @unique
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  back3nd_permission back3nd_permission[]

  back3nd_entity_fields back3nd_entity_fields[]
}

model back3nd_entity_fields {
  id             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  columnName     String
  columnType     String
  size           Int?
  placeholder    String?
  defaultValue   String?
  entity_id      String @db.Uuid
  created_at         DateTime             @default(now())
  back3nd_entity back3nd_entity  @relation(fields: [entity_id], references: [id])

  @@index([entity_id])
  @@unique([entity_id, columnName])
}

model back3nd_password_reset {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String       @db.Uuid
  token      String
  created_at DateTime     @default(now())
  expires_at DateTime
  user       back3nd_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
